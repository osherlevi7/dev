name: "[ci-cd] | Run continuous integration to DockerHub"
on:
  # pull_request:
  #   types:
  #     - opened
  #     - reopened
  #     - synchronize
  #     - ready_for_review
    # branches-ignore:
    #   - cosmetics/**
  push:
     branches:
       - main
       - dev
    
    # branches-ignore:
    #   - cosmetics/**
    #   - cosmetic/**

concurrency: 
  group: 'ci-${{ github.ref }}'
defaults:
  run:
    shell: bash
jobs:

  affected-services:
    runs-on: ubuntu-22.04
    name: Fetch changed files
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: INFO | Debugging info
        run: |
          echo '${{ github.event.head_commit.message }}'
          echo '${{ github.base_ref }}'
          echo '${{ github.ref }}'
      
      - name: FILES | Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42.0.0

      - name: CHANGED-FILE | List all changed files & Set affected services
        id: set-services
        run: |
          # Initialize an array to store affected services
          affected_services=()

          # Loop through the changed files
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
            
            # Check if the file is inside the "services" folder
            if [[ "$file" == services/* ]]; then
              # Extract the service name from the file path
              service_name=$(echo "$file" | cut -d'/' -f2)
              affected_services+=("$service_name")
            fi
          done

          # Deduplicate the affected services
          affected_services=($(echo "${affected_services[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

          # Combine the affected services into a single string
          parsed=$(IFS='|'; echo "${affected_services[*]}"; IFS=$' \t\n')

          # Output the result
          echo "affected_services_output=$parsed" >> $GITHUB_OUTPUT
    outputs:
      affected_services_output: ${{ steps.set-services.outputs.affected_services_output }}
    
  call-checkov:
    name: IF TERRAFORM CHANGED | Run Checkov terraform SCA
    needs: [affected-services]
    if: contains(needs.affected-services.outputs.affected_services_output, 'terraform')
    uses: ./.github/workflows/ci-checkov-terraform.yaml
    with:
      services: ${{needs.affected-services.outputs.affected_services_output}}

  # call-infracost:
  #       name: JOB | Run infracost terraform 
  #       # needs: [affected-services]
  #       uses: osher.levi7/dev/.github/workflows/infracost.yaml@main
  #       with:
  #         terraform_env: terraform/gcp/environments/infra-secure
    
  setup-build-push:
    name: IF SERVICES CHANGED |  Setup, Build, and Push to registry
    needs: [affected-services]
    if: needs.affected-services.outputs.affected_services_output
    runs-on: ubuntu-latest
    steps:
      - name: CHECKOUT | Bring the new code
        uses: actions/checkout@v4.1.1

      # - name: BUILD-X | Set up Docker Buildx  # need to enable and save the cache
      #   uses: docker/setup-buildx-action@v2.2.0

      - name: DOCKER-HUB | login to Dockerhub
        run: docker login -u osherlevi7 -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: BUILD |  Docker build service  
        run: >
          ./scripts/docker_build.sh 
          --action build
          --branch ${{ github.ref_name }}
          --affected_services '"${{needs.affected-services.outputs.affected_services_output}}"'

      - name: PUSH | Docker push service
        run: >
          ./scripts/docker_build.sh 
          --action push
          --branch ${{ github.ref_name }}
          --affected_services '"${{needs.affected-services.outputs.affected_services_output}}"'


